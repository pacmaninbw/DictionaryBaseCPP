#ifndef GD_PERFORMANCETEST_H_
#define GD_PERFORMANCETEST_H_

// Warning, this file is generated by a test generator
// This file contains 1 performance tests
//  test 16enum values

#include "../../include/GenericDictionary.h"
#include "../BasicGenericDictionaryTests.h"
#include <string>
#include "../UtilityTimer.h"
#include <vector>


// Generated GenericDictionary Performance Test Values for an enum class of 16 enum values

typedef enum class GDPerformanceTestEnum16
{
	GD_PERFORMANCE_TEST_INVALID_VALUE,
	GD_PERFORMANCE_TEST_VALUE_1,
	GD_PERFORMANCE_TEST_VALUE_2,
	GD_PERFORMANCE_TEST_VALUE_3,
	GD_PERFORMANCE_TEST_VALUE_4,
	GD_PERFORMANCE_TEST_VALUE_5,
	GD_PERFORMANCE_TEST_VALUE_6,
	GD_PERFORMANCE_TEST_VALUE_7,
	GD_PERFORMANCE_TEST_VALUE_8,
	GD_PERFORMANCE_TEST_VALUE_9,
	GD_PERFORMANCE_TEST_VALUE_10,
	GD_PERFORMANCE_TEST_VALUE_11,
	GD_PERFORMANCE_TEST_VALUE_12,
	GD_PERFORMANCE_TEST_VALUE_13,
	GD_PERFORMANCE_TEST_VALUE_14,
	GD_PERFORMANCE_TEST_VALUE_15,
	GD_PERFORMANCE_TEST_VALUE_16,
	GD_PERFORMANCE_LAST_ENUM
} GDPerformanceTestEnum16;

static std::vector<std::string> GDPerformanceTestStrings16 = 
{
	"", // For GD_PERFORMANCE_TEST_INVALID_VALUE
	"Performance Test String 1",
	"Performance Test String 2",
	"Performance Test String 3",
	"Performance Test String 4",
	"Performance Test String 5",
	"Performance Test String 6",
	"Performance Test String 7",
	"Performance Test String 8",
	"Performance Test String 9",
	"Performance Test String 10",
	"Performance Test String 11",
	"Performance Test String 12",
	"Performance Test String 13",
	"Performance Test String 14",
	"Performance Test String 15",
	"Performance Test String 16",
	"" // For GD_PERFORMANCE_LAST_ENUM
};


static std::vector<struct TestPairs<GDPerformanceTestEnum16>> testData16 =
{
	{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_1, GDPerformanceTestStrings16[1]},
	{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_2, GDPerformanceTestStrings16[2]},
	{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_3, GDPerformanceTestStrings16[3]},
	{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_4, GDPerformanceTestStrings16[4]},
	{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_5, GDPerformanceTestStrings16[5]},
	{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_6, GDPerformanceTestStrings16[6]},
	{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_7, GDPerformanceTestStrings16[7]},
	{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_8, GDPerformanceTestStrings16[8]},
	{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_9, GDPerformanceTestStrings16[9]},
	{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_10, GDPerformanceTestStrings16[10]},
	{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_11, GDPerformanceTestStrings16[11]},
	{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_12, GDPerformanceTestStrings16[12]},
	{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_13, GDPerformanceTestStrings16[13]},
	{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_14, GDPerformanceTestStrings16[14]},
	{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_15, GDPerformanceTestStrings16[15]},
	{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_16, GDPerformanceTestStrings16[16]}
};


static bool performanceTest16()
{
	bool testPassed = true;
	UtilityTimer testTimer;

	std::string testName("performanceTest16");

	try {
		std::clog << "Testing GenericDictionary with enum of size 16\n";
		testTimer.startTimer();
		GenericDictionary <GDPerformanceTestEnum16, std::string> underTest (
			GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_INVALID_VALUE,
			GDPerformanceTestEnum16::GD_PERFORMANCE_LAST_ENUM,
			{
				{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_1, GDPerformanceTestStrings16[1]},
				{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_2, GDPerformanceTestStrings16[2]},
				{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_3, GDPerformanceTestStrings16[3]},
				{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_4, GDPerformanceTestStrings16[4]},
				{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_5, GDPerformanceTestStrings16[5]},
				{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_6, GDPerformanceTestStrings16[6]},
				{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_7, GDPerformanceTestStrings16[7]},
				{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_8, GDPerformanceTestStrings16[8]},
				{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_9, GDPerformanceTestStrings16[9]},
				{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_10, GDPerformanceTestStrings16[10]},
				{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_11, GDPerformanceTestStrings16[11]},
				{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_12, GDPerformanceTestStrings16[12]},
				{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_13, GDPerformanceTestStrings16[13]},
				{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_14, GDPerformanceTestStrings16[14]},
				{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_15, GDPerformanceTestStrings16[15]},
				{GDPerformanceTestEnum16::GD_PERFORMANCE_TEST_VALUE_16, GDPerformanceTestStrings16[16]}
			}
		);
		testTimer.stopTimerAndReport("Performance Test Constructor " + testName + " ");

		testPassed = performanceExecution<GDPerformanceTestEnum16>(underTest, testData16, testName);

	}
	catch (const std::logic_error &le)
	{
		std::cerr << "TestGenericDictionary::testContructorPositivePath() logic_error: " << le.what() << "\n\n";
		testPassed = false;
	}
	catch(const std::exception& e)
	{
		std::cerr << "TestGenericDictionary::testContructorPositivePath() UNKNOWN EXCEPTION: " << e.what() << "\n";
		testPassed = false;
	}
	std::clog << "GenericDictionary Constructor performanceTest16 " << (testPassed? "PASSED\n\n": "FAILED\n\n");

	return testPassed;
}

bool performancetests()
{
	bool allTestsPassed = true;

	if (allTestsPassed)
	{
		allTestsPassed = performanceTest16();
	}

	return allTestsPassed;
}

#endif // GD_PERFORMANCETEST_H_

